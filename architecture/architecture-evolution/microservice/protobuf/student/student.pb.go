// Code generated by protoc-gen-go. DO NOT EDIT.
// source: microservice/protobuf/student/student.proto

package student

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StudentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StudentRequest) Reset()         { *m = StudentRequest{} }
func (m *StudentRequest) String() string { return proto.CompactTextString(m) }
func (*StudentRequest) ProtoMessage()    {}
func (*StudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7df426cda642ccfc, []int{0}
}

func (m *StudentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StudentRequest.Unmarshal(m, b)
}
func (m *StudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StudentRequest.Marshal(b, m, deterministic)
}
func (m *StudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRequest.Merge(m, src)
}
func (m *StudentRequest) XXX_Size() int {
	return xxx_messageInfo_StudentRequest.Size(m)
}
func (m *StudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRequest proto.InternalMessageInfo

func (m *StudentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StudentResponse struct {
	Sname                string   `protobuf:"bytes,1,opt,name=sname,proto3" json:"sname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StudentResponse) Reset()         { *m = StudentResponse{} }
func (m *StudentResponse) String() string { return proto.CompactTextString(m) }
func (*StudentResponse) ProtoMessage()    {}
func (*StudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7df426cda642ccfc, []int{1}
}

func (m *StudentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StudentResponse.Unmarshal(m, b)
}
func (m *StudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StudentResponse.Marshal(b, m, deterministic)
}
func (m *StudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentResponse.Merge(m, src)
}
func (m *StudentResponse) XXX_Size() int {
	return xxx_messageInfo_StudentResponse.Size(m)
}
func (m *StudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentResponse proto.InternalMessageInfo

func (m *StudentResponse) GetSname() string {
	if m != nil {
		return m.Sname
	}
	return ""
}

func init() {
	proto.RegisterType((*StudentRequest)(nil), "StudentRequest")
	proto.RegisterType((*StudentResponse)(nil), "StudentResponse")
}

func init() {
	proto.RegisterFile("microservice/protobuf/student/student.proto", fileDescriptor_7df426cda642ccfc)
}

var fileDescriptor_7df426cda642ccfc = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xce, 0xcd, 0x4c, 0x2e,
	0xca, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a,
	0x4d, 0xd3, 0x2f, 0x2e, 0x29, 0x4d, 0x49, 0xcd, 0x2b, 0x81, 0xd1, 0x7a, 0x60, 0x09, 0x25, 0x05,
	0x2e, 0xbe, 0x60, 0x88, 0x40, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x10, 0x1f, 0x17, 0x53,
	0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x53, 0x66, 0x8a, 0x92, 0x3a, 0x17, 0x3f,
	0x5c, 0x45, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17, 0x6b, 0x71, 0x5e, 0x62, 0x6e,
	0x2a, 0x54, 0x15, 0x84, 0x63, 0x64, 0xc7, 0xc5, 0x0e, 0x55, 0x28, 0x64, 0xcc, 0xc5, 0x13, 0x58,
	0x9a, 0x5a, 0x54, 0x09, 0xe3, 0xf3, 0xeb, 0xa1, 0x5a, 0x22, 0x25, 0xa0, 0x87, 0x66, 0xa6, 0x12,
	0x43, 0x12, 0x1b, 0xd8, 0x45, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x38, 0x95, 0x6c,
	0xc0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudentClient is the client API for Student service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentClient interface {
	QueryStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error)
}

type studentClient struct {
	cc *grpc.ClientConn
}

func NewStudentClient(cc *grpc.ClientConn) StudentClient {
	return &studentClient{cc}
}

func (c *studentClient) QueryStudent(ctx context.Context, in *StudentRequest, opts ...grpc.CallOption) (*StudentResponse, error) {
	out := new(StudentResponse)
	err := c.cc.Invoke(ctx, "/Student/QueryStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServer is the server API for Student service.
type StudentServer interface {
	QueryStudent(context.Context, *StudentRequest) (*StudentResponse, error)
}

func RegisterStudentServer(s *grpc.Server, srv StudentServer) {
	s.RegisterService(&_Student_serviceDesc, srv)
}

func _Student_QueryStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).QueryStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Student/QueryStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).QueryStudent(ctx, req.(*StudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Student_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Student",
	HandlerType: (*StudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryStudent",
			Handler:    _Student_QueryStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice/protobuf/student/student.proto",
}
